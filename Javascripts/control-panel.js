// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
const CONFIG = {
    RECONNECT_INTERVAL: 3000,
    RECONNECT_MAX_ATTEMPTS: 10,
    MESSAGE_TIMEOUT: 3000
};

// === –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ===
let ws;
let currentHalf = 1;
let currentScale = 1.0;
let isBackgroundFixed = false;
let state = {};
let reconnectAttempts = 0;
let isConnected = false;

// === –£—Ç–∏–ª–∏—Ç—ã ===
function showMessage(text, type = 'error') {
    const messageEl = document.getElementById(type + 'Message');
    if (messageEl) {
        messageEl.textContent = text;
        messageEl.style.display = 'block';
        setTimeout(() => {
            messageEl.style.display = 'none';
        }, CONFIG.MESSAGE_TIMEOUT);
    }
}

function showError(text) {
    showMessage(text, 'error');
    console.error(text);
}

function showSuccess(text) {
    showMessage(text, 'success');
    console.log(text);
}

function updateConnectionStatus(status) {
    const indicator = document.getElementById('connectionIndicator');
    const container = document.querySelector('.container');
    
    indicator.className = `connection-indicator ${status}`;
    
    switch (status) {
        case 'connected':
            indicator.textContent = 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
            container.classList.remove('disabled');
            isConnected = true;
            reconnectAttempts = 0;
            break;
        case 'connecting':
            indicator.textContent = 'üü° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
            container.classList.add('disabled');
            isConnected = false;
            break;
        case 'disconnected':
            indicator.textContent = 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ';
            container.classList.add('disabled');
            isConnected = false;
            break;
    }
}

function throttle(func, limit) {
    let lastFunc;
    let lastRan;
    return function(...args) {
        if (!lastRan) {
            func.apply(this, args);
            lastRan = Date.now();
        } else {
            clearTimeout(lastFunc);
            lastFunc = setTimeout(() => {
                if ((Date.now() - lastRan) >= limit) {
                    func.apply(this, args);
                    lastRan = Date.now();
                }
            }, limit - (Date.now() - lastRan));
        }
    }
}

// === WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ===
function connect() {
    try {
        updateConnectionStatus('connecting');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsUrl = `${protocol}//${window.location.host}`;
        
        ws = new WebSocket(wsUrl);
        
        ws.onopen = () => {
            console.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
            updateConnectionStatus('connected');
            showSuccess('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        };
        
        ws.onmessage = (event) => {
            try {
                handleMessage(event);
            } catch (error) {
                showError(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
            }
        };
        
        ws.onclose = (event) => {
            console.log('WebSocket –∑–∞–∫—Ä—ã—Ç:', event.code, event.reason);
            updateConnectionStatus('disconnected');
            
            if (reconnectAttempts < CONFIG.RECONNECT_MAX_ATTEMPTS) {
                reconnectAttempts++;
                showError(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts}/${CONFIG.RECONNECT_MAX_ATTEMPTS}...`);
                setTimeout(connect, CONFIG.RECONNECT_INTERVAL);
            } else {
                showError('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            }
        };
        
        ws.onerror = (error) => {
            console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
            updateConnectionStatus('disconnected');
            showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        };
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
        updateConnectionStatus('disconnected');
    }
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
function handleMessage(event) {
    const data = JSON.parse(event.data);
    
    switch (data.type) {
        case 'element_position_update':
            // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ state –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if (!state.positions) state.positions = {};
            state.positions[data.element] = data.position;
            // –ü–æ–∫–∞ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º UI ‚Äî –Ω–æ –æ—à–∏–±–∫–∞ –ø—Ä–æ–ø–∞–¥—ë—Ç
            break;
        case 'full_state':
            updateUI(data.state);
            break;
        case 'score_update':
            document.getElementById('team1Score').textContent = data.team1;
            document.getElementById('team2Score').textContent = data.team2;
            break;
        case 'time_update':
            updateTimer(data.time);
            break;
        case 'mute_state':
            document.getElementById('muteBtn').textContent = data.muted ? 'Unmute' : 'Mute';
            break;
        case 'auto_stop_update':
            const autoStopCb = document.getElementById('autoStop');
            if (autoStopCb) autoStopCb.checked = data.autoStop || false;
            break;
        case 'background_update':
            if (data.background.image) setupBackground(data.background);
            break;
        case 'background_size_update':
            if (data.scale !== undefined) {
                currentScale = data.scale;
                const img = document.getElementById('backgroundImage');
                if (img) img.style.transform = `scale(${currentScale})`;
            }
            break;
        case 'background_fixed_update':
            updateBackgroundFixedState(data.fixed || false);
            break;
        case 'font_size_update':
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ UI, —á—Ç–æ–±—ã –æ–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–æ—Å—å
            if (data.element === 'teamScore') {
                const scoreSizeEl = document.getElementById('scoreSize');
                if (scoreSizeEl) scoreSizeEl.value = data.size;
            } else if (data.element === 'timer') {
                const timerSizeEl = document.getElementById('timerSize');
                if (timerSizeEl) timerSizeEl.value = data.size;
            }
            break;
        case 'background_position_update':
            const img = document.getElementById('backgroundImage');
            if (img && img.style.display !== 'none') {
                const x = data.position?.x || 0;
                const y = data.position?.y || 0;
                img.style.left = x + 'px';
                img.style.top = y + 'px';
            }
            break;
        case 'font_family_update':
            if (data.element === 'teamScore') {
                const scoreFontEl = document.getElementById('scoreFont');
                if (scoreFontEl) scoreFontEl.value = data.fontFamily;
            } else if (data.element === 'timer') {
                const timerFontEl = document.getElementById('timerFont');
                if (timerFontEl) timerFontEl.value = data.fontFamily;
            }
            break;
        case 'available_fonts':
            updateFontSelects(data.fonts);
            break;
        case 'error':
            showError(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${data.message}`);
            break;
        default:
            console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', data.type);
    }
}

// === –ö–æ–º–∞–Ω–¥—ã ===
function sendCommand(cmd, params = {}) {
    if (!isConnected) {
        showError('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        return false;
    }
    
    try {
        const command = { command: cmd, ...params };
        ws.send(JSON.stringify(command));
        return true;
    } catch (error) {
        showError(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: ${error.message}`);
        return false;
    }
}

// === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º ===
function setCustomTime() {
    const timeInput = document.getElementById('timeInput');
    const timeStr = timeInput.value.trim();
    
    if (!timeStr) {
        showError('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è');
        timeInput.focus();
        return;
    }

    const parts = timeStr.split(':');
    if (parts.length !== 2) {
        showError('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú:–°–° (–Ω–∞–ø—Ä–∏–º–µ—Ä, 45:00 –∏–ª–∏ 77:05)');
        timeInput.focus();
        return;
    }

    const mins = parseInt(parts[0], 10);
    const secs = parseInt(parts[1], 10);

    if (isNaN(mins) || isNaN(secs) || mins < 0 || secs < 0 || secs >= 60) {
        showError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –ú–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏, —Å–µ–∫—É–Ω–¥—ã < 60.');
        timeInput.focus();
        return;
    }

    const totalSeconds = mins * 60 + secs;
    const half = totalSeconds > 45 * 60 ? 2 : 1;

    if (sendCommand('set_custom_time', { time: totalSeconds, half })) {
        showSuccess(`–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${timeStr}`);
        timeInput.value = '';
    }
}

function toggleHalf(half) {
    if (sendCommand('toggle_half', { half })) {
        currentHalf = half;
    }
}

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI ===
function updateUI(newState) {
    if (!newState) {
        showError('–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
        return;
    }
    
    state = newState;
    currentHalf = newState.currentHalf;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç –∏ —Ç–∞–π–º–µ—Ä
    document.getElementById('team1Score').textContent = newState.team1Score || 0;
    document.getElementById('team2Score').textContent = newState.team2Score || 0;
    updateTimer(newState.time || 0);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const btn1 = document.getElementById('startHalf1');
    const btn2 = document.getElementById('startHalf2');
    const halfIndicator = document.getElementById('halfIndicator');
    const autoStopCb = document.getElementById('autoStop');
    const muteBtn = document.getElementById('muteBtn');

    if (autoStopCb) autoStopCb.checked = newState.autoStop;
    if (muteBtn) muteBtn.textContent = newState.isMuted ? 'Unmute' : 'Mute';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–∞–π–º–∞
    const halfText = currentHalf + (newState.timerRunning ? ' —Ç–∞–π–º (–∞–∫—Ç–∏–≤–µ–Ω)' : ' —Ç–∞–π–º');
    if (halfIndicator) halfIndicator.textContent = halfText;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    if (btn1) {
        btn1.textContent = (currentHalf === 1 && newState.timerRunning) ? '–ü–∞—É–∑–∞ 1 —Ç–∞–π–º' : '–°—Ç–∞—Ä—Ç 1 —Ç–∞–π–º';
        btn1.setAttribute('aria-label', btn1.textContent);
    }
    
    if (btn2) {
        btn2.textContent = (currentHalf === 2 && newState.timerRunning) ? '–ü–∞—É–∑–∞ 2 —Ç–∞–π–º' : '–°—Ç–∞—Ä—Ç 2 —Ç–∞–π–º';
        btn2.setAttribute('aria-label', btn2.textContent);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω
    if (newState.background?.image) {
        setupBackground(newState.background);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤
    if (newState.fontSettings) {
        const fs = newState.fontSettings;
        const scoreSizeEl = document.getElementById('scoreSize');
        const timerSizeEl = document.getElementById('timerSize');
        const scoreFontEl = document.getElementById('scoreFont');
        const timerFontEl = document.getElementById('timerFont');
        
        if (scoreSizeEl && fs.teamScore) scoreSizeEl.value = fs.teamScore.fontSize;
        if (timerSizeEl && fs.timer) timerSizeEl.value = fs.timer.fontSize;
        if (scoreFontEl && fs.teamScore?.fontFamily) scoreFontEl.value = fs.teamScore.fontFamily;
        if (timerFontEl && fs.timer?.fontFamily) timerFontEl.value = fs.timer.fontFamily;
    }
}

function updateTimer(seconds) {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    const timerEl = document.getElementById('timerDisplay');
    if (timerEl) {
        timerEl.textContent = `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
}

// === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–æ–º ===
function setupBackground(bg) {
    const img = document.getElementById('backgroundImage');
    if (!img) return;
    
    img.src = bg.image;
    img.style.display = 'block';
    currentScale = bg.scale || 1.0;
    img.style.transform = `scale(${currentScale})`;
    updateBackgroundPosition(bg.position.x || 0, bg.position.y || 0);
    updateBackgroundFixedState(bg.fixed || false);
}

function updateBackgroundPosition(x, y) {
    const img = document.getElementById('backgroundImage');
    if (img) {
        img.style.left = x + 'px';
        img.style.top = y + 'px';
        img.style.position = 'absolute';
    }
}

function moveBackground(dx, dy) {
    const step = parseInt(document.getElementById('bgStep').value) || 10;
    const img = document.getElementById('backgroundImage');
    if (!img || img.style.display === 'none') return;

    let x = parseInt(img.style.left) || 0;
    let y = parseInt(img.style.top) || 0;

    x += dx * step;
    y += dy * step;

    img.style.left = x + 'px';
    img.style.top = y + 'px';
    sendCommand('update_background_position', { x, y });
}

function resetBackgroundPosition() {
    const img = document.getElementById('backgroundImage');
    if (!img) return;
    img.style.left = '0px';
    img.style.top = '0px';
    sendCommand('update_background_position', { x: 0, y: 0 });
}

function applyBackgroundPosition() {
    const x = parseInt(document.getElementById('bgX').value) || 0;
    const y = parseInt(document.getElementById('bgY').value) || 0;
    const img = document.getElementById('backgroundImage');
    if (!img || img.style.display === 'none') return;

    img.style.left = x + 'px';
    img.style.top = y + 'px';
    sendCommand('update_background_position', { x, y });
}

function updateBackgroundFixedState(fixed) {
    isBackgroundFixed = fixed;
    const img = document.getElementById('backgroundImage');
    const btn = document.getElementById('fixBackgroundBtn');
    
    if (img && btn) {
        if (fixed) {
            img.classList.add('fixed');
            btn.textContent = '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ–Ω';
        } else {
            img.classList.remove('fixed');
            btn.textContent = '–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ–Ω';
        }
    }
}

function toggleBackgroundFixed() {
    sendCommand('toggle_background_fixed');
}

function scaleBackground(factor) {
    const img = document.getElementById('backgroundImage');
    if (img && img.style.display !== 'none') {
        currentScale *= factor;
        currentScale = Math.max(0.1, Math.min(5.0, currentScale)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–±
        img.style.transform = `scale(${currentScale})`;
        sendCommand('update_background_size', { scale: currentScale });
    }
}

// === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞–º–∏ ===
function updateFontSize(element, inputId) {
    const sizeEl = document.getElementById(inputId);
    if (!sizeEl) return;
    
    const size = parseFloat(sizeEl.value);
    if (isNaN(size) || size <= 0) {
        showError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞');
        return;
    }
    
    if (sendCommand('update_font_size', { element, size })) {
        showSuccess(`–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω: ${size}em`);
    }
}

function updateFontFamily(element, selectId) {
    const selectEl = document.getElementById(selectId);
    if (!selectEl) return;
    
    const fontFamily = selectEl.value;
    if (!fontFamily) {
        showError('–í—ã–±–µ—Ä–∏—Ç–µ —à—Ä–∏—Ñ—Ç');
        return;
    }
    
    if (sendCommand('update_font_family', { element, fontFamily })) {
        showSuccess(`–®—Ä–∏—Ñ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: ${fontFamily}`);
    }
}

function updateFontSelects(fonts) {
    ['scoreFont', 'timerFont'].forEach(id => {
        const select = document.getElementById(id);
        if (!select) return;
        
        const currentValue = select.value;
        select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —à—Ä–∏—Ñ—Ç</option>';
        
        fonts.forEach(font => {
            const opt = document.createElement('option');
            opt.value = font.fontFamily;
            opt.textContent = font.fontFamily;
            select.appendChild(opt);
        });
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (currentValue && fonts.find(f => f.fontFamily === currentValue)) {
            select.value = currentValue;
        }
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (state.fontSettings) {
        const scoreFontEl = document.getElementById('scoreFont');
        const timerFontEl = document.getElementById('timerFont');
        
        if (scoreFontEl && state.fontSettings.teamScore?.fontFamily) {
            scoreFontEl.value = state.fontSettings.teamScore.fontFamily;
        }
        if (timerFontEl && state.fontSettings.timer?.fontFamily) {
            timerFontEl.value = state.fontSettings.timer.fontFamily;
        }
    }
}

// === –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —Ñ–æ–Ω–∞ ===
let isDragging = false;
let dragStartX, dragStartY;
let startLeft, startTop;
let bgImage;
let hitLayer;

function initDrag() {
    bgImage = document.getElementById('backgroundImage');
    hitLayer = document.getElementById('backgroundHitLayer'); // ‚Üê –ù–æ–≤—ã–π —Å–ª–æ–π
    if (!bgImage || !hitLayer) return;
    
    // –°–ª—É—à–∞–µ–º mousedown –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    document.addEventListener('mousedown', handleMouseDown);
    document.addEventListener('touchstart', handleTouchStart, { passive: false });
    
    document.addEventListener('mousemove', throttledDrag);
    document.addEventListener('touchmove', throttledDrag, { passive: false });
    
    document.addEventListener('mouseup', stopDrag);
    document.addEventListener('touchend', stopDrag);
}

function handleMouseDown(e) {
    if (isBackgroundFixed) return; // ‚Üê –¢–æ–ª—å–∫–æ —Ñ–∏–∫—Å–∞—Ü–∏—è
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ e.target –£–î–ê–õ–ï–ù–ê ‚Äî –∫–ª–∏–∫ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —ç–∫—Ä–∞–Ω–∞ –Ω–∞—á–Ω—ë—Ç drag!
    // ‚ùå –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    const interactiveElements = [
        'BUTTON', 'INPUT', 'TEXTAREA', 'SELECT', 'LABEL',
        'A', 'VIDEO', 'AUDIO', 'CANVAS', 'IFRAME'
    ];

    // ‚ùå –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    const interactiveClasses = [
        '.font-controls', '.background-controls', '.controls',
        '.score-display', '.connection-indicator', '.error-message',
        '.success-message', '.timer', '.team'
    ];

    let target = e.target;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥
    if (interactiveElements.includes(target.tagName)) {
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã
    for (let cls of interactiveClasses) {
        if (target.closest(cls)) {
            return;
        }
    }

    // ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: data-interactive (–Ω–æ–≤–æ–µ!)
    if (target.closest('[data-interactive]')) {
        return;
    }
//–ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º drag
    startDrag(e);
}
// touch –≤–µ—Ä—Å–∏—è
function handleTouchStart(e) {
    if (!e.touches?.[0] || isBackgroundFixed) return;
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ e.touches[0].target –£–î–ê–õ–ï–ù–ê ‚Äî –∫–ª–∏–∫ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —ç–∫—Ä–∞–Ω–∞ –Ω–∞—á–Ω—ë—Ç drag!
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å —Å–æ–±—ã—Ç–∏—è
    const target = e.touches[0].target;
    // ‚ùå –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    const interactiveElements = [
        'BUTTON', 'INPUT', 'TEXTAREA', 'SELECT', 'LABEL',
        'A', 'VIDEO', 'AUDIO', 'CANVAS', 'IFRAME'
    ];
    // ‚ùå –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    // (–∫–æ–ø–∏–ø–∞—Å—Ç–∞ –∏–∑ mouse)
    const interactiveClasses = [
        '.font-controls', '.background-controls', '.controls',
        '.score-display', '.connection-indicator', '.error-message',
        '.success-message', '.timer', '.team'
    ];
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥
    if (interactiveElements.includes(target.tagName)) {
        return;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã
    for (let cls of interactiveClasses) {
        if (target.closest(cls)) {
            return;
        }
    }

    // ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ data-interactive
    if (target.closest('[data-interactive]')) {
        return;
    }
//–ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º drag xD x2 Javohir?
    startDrag(e);
}
// –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
function startDrag(e) {
    e.preventDefault();
    isDragging = true;
    
    const clientX = e.clientX || e.touches?.[0]?.clientX;
    const clientY = e.clientY || e.touches?.[0]?.clientY;
    if (!clientX || !clientY) return;
    
    dragStartX = clientX;
    dragStartY = clientY;
    startLeft = parseInt(bgImage.style.left) || 0;
    startTop = parseInt(bgImage.style.top) || 0;
    
    bgImage.style.cursor = 'grabbing';
    bgImage.style.pointerEvents = 'none';
    
    // üëá –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ö–∏—Ç-—Å–ª–æ–π
    if (hitLayer) {
        hitLayer.style.display = 'block';
        hitLayer.classList.add('dragging');
    }
}
// –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
function stopDrag() {
    if (isDragging) {
        isDragging = false;
        
        if (bgImage) {
            bgImage.style.cursor = 'grab';
            bgImage.style.pointerEvents = 'auto';
            
            const x = parseInt(bgImage.style.left) || 0;
            const y = parseInt(bgImage.style.top) || 0;
            sendCommand('update_background_position', { x, y });
        }
        
        // üëá –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ö–∏—Ç-—Å–ª–æ–π
        if (hitLayer) {
            hitLayer.classList.remove('dragging');
            hitLayer.style.display = 'none';
        }
    }
}
// Throttle –¥–ª—è drag
const throttledDrag = throttle((e) => {
    if (!isDragging || isBackgroundFixed) return; // üëà –ì–ª–∞–≤–Ω—ã–π —Ñ–ª–∞–≥!
    
    e.preventDefault();
    
    const clientX = e.clientX || e.touches?.[0]?.clientX;
    const clientY = e.clientY || e.touches?.[0]?.clientY;
    if (!clientX || !clientY) return;
    
    const dx = clientX - dragStartX;
    const dy = clientY - dragStartY;
    
    let x = startLeft + dx;
    let y = startTop + dy;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —É–ª–µ—Ç–∞–ª–æ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
    x = Math.max(-window.innerWidth * 2, Math.min(window.innerWidth * 3, x));
    y = Math.max(-window.innerHeight * 2, Math.min(window.innerHeight * 3, y));
    
    bgImage.style.left = x + 'px';
    bgImage.style.top = y + 'px';
}, 16);

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ ===
function initFileUpload() {
    const uploadEl = document.getElementById('backgroundUpload');
    if (!uploadEl) return;
    
    uploadEl.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (!file) return;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if (!file.type.startsWith('image/')) {
            showError('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 10MB)
        if (file.size > 10 * 1024 * 1024) {
            showError('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 10MB)');
            return;
        }
        
        const reader = new FileReader();
        reader.onload = e => {
            if (sendCommand('set_background', {
                image: e.target.result,
                position: { x: 0, y: 0 },
                scale: 1.0,
                fixed: false
            })) {
                showSuccess('–§–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω');
            }
        };
        reader.onerror = () => showError('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
        reader.readAsDataURL(file);
    });
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
window.addEventListener('load', () => {
    connect();
    initDrag();
    initFileUpload();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Enter –≤ –ø–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏
    const timeInput = document.getElementById('timeInput');
    if (timeInput) {
        timeInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                setCustomTime();
            }
        });
    }
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', (e) => {
        if (isConnected) {
            e.preventDefault();
            e.returnValue = '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è?';
        }
    });
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ===
window.addEventListener('error', (e) => {
    console.error('JavaScript error:', e.error);
    showError(`–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${e.message}`);
});

// === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ shortcuts ===
document.addEventListener('keydown', (e) => {
    if (!isConnected) return;
    
    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    if (e.target.tagName === 'INPUT') return;
    
    switch (e.key) {
        case '1':
            if (e.ctrlKey) {
                e.preventDefault();
                sendCommand('add_goal', {team: 1});
            }
            break;
        case '2':
            if (e.ctrlKey) {
                e.preventDefault();
                sendCommand('add_goal', {team: 2});
            }
            break;
        case ' ':
            e.preventDefault();
            toggleHalf(currentHalf);
            break;
        case 'r':
            if (e.ctrlKey) {
                e.preventDefault();
                sendCommand('reset', {half: currentHalf});
            }
            break;
    }
});